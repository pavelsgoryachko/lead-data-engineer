Python Data model https://docs.python.org/3/reference/datamodel.html


1. Python’s Core Data Types:

None - This type has a single value. There is a single object with this value. This object is accessed through the built-in name None.
It is used to signify the absence of a value in many situations, e.g., it is returned from functions that don’t explicitly return anything. Its truth value is false.

int = 1 (age: int = 1)
float = 1.0
str = "text"
bytes = b"test"
bool = True

# For collections on Python 3.9+, the type of the collection item is in brackets
list[int] = [1]
set[int] = {6, 7}

# For mappings, we need the types of both keys and values
dict[str, float] = {"field": 2.0}

# For tuples of fixed size, we specify the types of all the elements
tuple[int, str, float] = (3, "yes", 7.5)

# For tuples of variable size, we use one type and ellipsis
tuple[int, ...] = (1, 2, 3)

# On Python 3.8 and earlier, the name of the collection type is
# capitalized, and the type is imported from the 'typing' module
from typing import List, Set, Dict, Tuple
List[int] = [1]
Set[int] = {6, 7}
Dict[str, float] = {"field": 2.0}
Tuple[int, str, float] = (3, "yes", 7.5)
Tuple[int, ...] = (1, 2, 3)

# On Python 3.10+, use the | operator when something could be one of a few types
list[int | str] = [3, 5, "test", "fun"]  # Python 3.10+
# On earlier versions, use Union
list[Union[int, str]] = [3, 5, "test", "fun"]

# Use X | None for a value that could be None on Python 3.10+
# Use Optional[X] on 3.9 and earlier; Optional[X] is the same as 'X | None'
str | None = "something" if some_condition() else None
if x is not None:
    # Mypy understands x won't be None here because of the if-statement
    print(x.upper())
# If you know a value can never be None due to some logic that mypy doesn't
# understand, use an assert
assert x is not None
print(x.upper())


2. Collections - Container datatypes
https://docs.python.org/3/library/collections.html#
This module implements specialized container datatypes providing alternatives to Python’s general purpose built-in containers, dict, list, set, and tuple.

namedtuple() - factory function for creating tuple subclasses with named fields
deque - list-like container with fast appends and pops on either end
ChainMap - dict-like class for creating a single view of multiple mappings
Counter - dict subclass for counting hashable objects
OrderedDict - dict subclass that remembers the order entries were added
defaultdict - dict subclass that calls a factory function to supply missing values
UserDict - wrapper around dictionary objects for easier dict subclassing
UserList - wrapper around list objects for easier list subclassing
UserString - wrapper around string objects for easier string subclassing



